openapi: 3.0.3
info:
  title: Pismo Challenge - Cards transactions
  description: |-
    This is a project to manage cardholder accounts and transactions. It was implemented using Golang, based on the clean architecture pattern.

    Some useful links:
    - [The service repository](https://github.com/rudineirk/pismo-challenge/)
    - [The source API definition](https://github.com/rudineirk/pismo-challenge/blob/master/docs/openapi.yaml)
  version: 1.0.0
  contact:
    url: https://rudineirk.github.io/pismo-challenge/api-docs/
  x-logo:
    url: './logo.png'
    altText: Pismo challenge logo
servers:
  - url: http://localhost:3000
tags:
  - name: accounts
    description: Cardholder account management APIs
  - name: transactions
    description: Cardholder transactions APIs
paths:
  /accounts:
    post:
      tags:
        - accounts
      summary: Create an account
      description: Create a new account
      operationId: createAccount
      requestBody:
        description: Create a new account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccount'
        required: true
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request payload
        '409':
          description: Duplicated account document number
      security:
        - auth: []
  /accounts/{accountId}:
    get:
      tags:
        - accounts
      summary: Get account by ID
      description: Returns a single cardholder account
      operationId: getAccountById
      parameters:
        - name: accountId
          in: path
          description: ID of account to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Account not found
      security:
        - auth: []
  /transactions:
    post:
      tags:
        - transactions
      summary: Create a transaction
      description: Create a new transaction
      operationId: createAccount
      requestBody:
        description: Create a new account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransaction'
        required: true
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid request payload
      security:
        - auth: []
components:
  schemas:
    CreateAccount:
      type: object
      properties:
        document_number:
          type: string
          example: "07155869000154"
      required:
        - document_number
    Account:
      type: object
      properties:
        account_id:
          type: integer
          format: int64
          example: 10
        document_number:
          type: string
          example: "07155869000154"
    CreateTransaction:
      type: object
      properties:
        account_id:
          type: integer
          format: int64
          example: 10
        operation_type_id:
          type: integer
          format: int
          example: 1
          enum:
            - 1
            - 2
            - 3
            - 4
          description: >
            1 - CASH PURCHASE<br>
            2 - INSTALLMENT PURCHASE<br>
            3 - WITHDRAWAL<br>
            4 - PAYMENT
        amount:
          type: number
          format: double
          example: -1.25
          description: >
            Should be positive or negative depending on the operation type:

            * positive:
              * PAYMENT
            * negative:
              * CASH PURCHASE
              * INSTALLMENT PURCHASE
              * WITHDRAWAL

            Can't be zero (0) or have more than 2 decimal places
      required:
        - account_id
        - operation_type_id
        - amount
    Transaction:
      type: object
      properties:
        transaction_id:
          type: integer
          format: int64
          example: 1525
        account_id:
          type: integer
          format: int64
          example: 10
        operation_type_id:
          type: integer
          format: int
          example: 1
          enum:
            - 1
            - 2
            - 3
            - 4
          description: >
            1 - CASH PURCHASE<br>
            2 - INSTALLMENT PURCHASE<br>
            3 - WITHDRAWAL<br>
            4 - PAYMENT
        amount:
          type: number
          format: double
          example: -1.25
          description: >
            Should be positive or negative depending on the operation type:

            * positive:
              * PAYMENT
            * negative:
              * CASH PURCHASE
              * INSTALLMENT PURCHASE
              * WITHDRAWAL

            Can't be zero (0) or have more than 2 decimal places
        event_date:
          type: string
          format: date-time
          example: "2023-11-15T11:02:35.686447768Z"
      required:
        - transaction_id
        - account_id
        - operation_type_id
        - amount
        - event_date
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    auth:
      type: http
      scheme: bearer
